
name: java-project

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule: 
    - cron: "0 5 * * *"

jobs:
  compile:
    runs-on: Agent-1

    steps:
      - name: checkout code
        uses: actions/checkout@v5

      - name: install java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: compile
        run: mvn compile

  Trivy-fs-scan:
    runs-on: Agent-1
    needs: compile

    steps:
      - name: checkout code
        uses: actions/checkout@v5

      - name: trivy-filesystem-scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-scan.json'
          vuln-type: 'os,library'

      - name: upload trivy scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-scan
          path: trivy-fs-scan.json

  GitLeaks-Scan:
    runs-on: Agent-1
    needs: Trivy-fs-scan

    steps:
      - name: checkout code
        uses: actions/checkout@v5

      - name: GitLeaks Installation
        run: sudo apt install gitleaks -y

      - name: Gitleaks code scan
        run:  gitleaks detect source . -r gitleaks-report.json -f json  

      - name: upload Gitleaks scan report
        uses: actions/upload-artifact@v4
        with:
          name: GitLeaks scan report
          path: gitleaks-scan.json

  unit-tests:
    runs-on: Agent-1
    needs: GitLeaks-Scan

    steps:
      - name: checkout code
        uses: actions/checkout@v5

      - name: install java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Run unit test cases
        run: mvn test  

  sonar-qube-analysis:
    runs-on: Agent-1
    needs: unit-tests

    steps:
      - name: checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: sonar-scan
        uses: SonarSource/sonarqube-scan-action@v5.3.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  snyk-check:
    runs-on: ubuntu-latest
    needs: sonar-qube-analysis

    steps:
      - name: checkout code
        uses: actions/checkout@v5

      - name: Run Synk to check for vulnerabilities
        uses: snyk/actions/maven-3-jdk-17@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --sarif-file-output=snyk.sarif

  Build:
    runs-on: Agent-1
    needs: snyk-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: java-app-jar
        path: target/*.jar  
      
        
          
          
          
      
    
  
      
        

 
        
        
      


  

  
